{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport { WebClient } from '../helpers/webClient';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../helpers/helpers\";\nexport class BaseService {\n  constructor(httpClient, helper, controllerName) {\n    this.helper = helper;\n    this._pathBase = \"api\";\n    this.webClient = new WebClient(httpClient, `${this._pathBase}/${controllerName}`, this.header());\n  }\n  extractData(res) {\n    const body = res.json();\n    return body || {};\n  }\n  handleError(error) {\n    let errMsg;\n    if (error instanceof Response) {\n      const body = error.json() || '';\n      const err = body || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    console.log(errMsg);\n    return throwError(errMsg);\n  }\n  header() {\n    let header = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    if (this.helper.isAuthenticated()) header = header.append('Authorization', `Bearer ${this.helper.getToken()}`);\n    return {\n      headers: header\n    };\n  }\n  setToken(data) {\n    this.helper.setToken(data);\n  }\n  failToken(error) {\n    this.helper.failToken();\n    return this.handleError(error);\n  }\n}\n_class = BaseService;\n_class.ɵfac = function BaseService_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["throwError","WebClient","HttpHeaders","BaseService","constructor","httpClient","helper","controllerName","_pathBase","webClient","header","extractData","res","body","json","handleError","error","errMsg","Response","err","JSON","stringify","status","statusText","message","toString","console","log","isAuthenticated","append","getToken","headers","setToken","data","failToken","factory","ɵfac"],"sources":["D:\\Kurulko\\My projects 2\\Notes\\angularapp\\src\\app\\services\\base.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { throwError } from 'rxjs'\r\nimport { Helpers } from '../helpers/helpers';\r\nimport { WebClient } from '../helpers/webClient';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport abstract class BaseService {\r\n    private readonly _pathBase:string = \"api\";\r\n    protected readonly webClient: WebClient;\r\n\r\n    constructor(httpClient: HttpClient, private readonly helper: Helpers, controllerName: string) {\r\n        this.webClient = new WebClient(httpClient, `${this._pathBase}/${controllerName}`, this.header());\r\n    }\r\n\r\n    public extractData(res: Response){\r\n        const body = res.json();\r\n        return body || {};\r\n    }\r\n\r\n    public handleError(error: Response | any){\r\n        let errMsg: string;\r\n        if(error instanceof Response){\r\n            const body = error.json() || '';\r\n            const err = body || JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.log(errMsg);\r\n        return throwError(errMsg);\r\n    }\r\n\r\n    public header(){\r\n        let header = new HttpHeaders({'Content-Type': 'application/json'});\r\n        if(this.helper.isAuthenticated())\r\n            header  = header.append('Authorization', `Bearer ${this.helper.getToken()}`);\r\n        return {headers: header};\r\n    }\r\n\r\n    public setToken(data:any){\r\n        this.helper.setToken(data);\r\n    }\r\n\r\n    public failToken(error: Response | any){\r\n        this.helper.failToken();\r\n        return this.handleError(error);\r\n    }\r\n}"],"mappings":";AACA,SAASA,UAAU,QAAQ,MAAM;AAEjC,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAAqBC,WAAW,QAAQ,sBAAsB;;;;AAG9D,OAAM,MAAgBC,WAAW;EAI7BC,YAAYC,UAAsB,EAAmBC,MAAe,EAAEC,cAAsB;IAAvC,KAAAD,MAAM,GAANA,MAAM;IAH1C,KAAAE,SAAS,GAAU,KAAK;IAIrC,IAAI,CAACC,SAAS,GAAG,IAAIR,SAAS,CAACI,UAAU,EAAE,GAAG,IAAI,CAACG,SAAS,IAAID,cAAc,EAAE,EAAE,IAAI,CAACG,MAAM,EAAE,CAAC;EACpG;EAEOC,WAAWA,CAACC,GAAa;IAC5B,MAAMC,IAAI,GAAGD,GAAG,CAACE,IAAI,EAAE;IACvB,OAAOD,IAAI,IAAI,EAAE;EACrB;EAEOE,WAAWA,CAACC,KAAqB;IACpC,IAAIC,MAAc;IAClB,IAAGD,KAAK,YAAYE,QAAQ,EAAC;MACzB,MAAML,IAAI,GAAGG,KAAK,CAACF,IAAI,EAAE,IAAI,EAAE;MAC/B,MAAMK,GAAG,GAAGN,IAAI,IAAIO,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC;MACxCI,MAAM,GAAG,GAAGD,KAAK,CAACM,MAAM,MAAMN,KAAK,CAACO,UAAU,IAAI,EAAE,IAAIJ,GAAG,EAAE;KAChE,MAAM;MACHF,MAAM,GAAGD,KAAK,CAACQ,OAAO,GAAGR,KAAK,CAACQ,OAAO,GAAGR,KAAK,CAACS,QAAQ,EAAE;;IAE7DC,OAAO,CAACC,GAAG,CAACV,MAAM,CAAC;IACnB,OAAOjB,UAAU,CAACiB,MAAM,CAAC;EAC7B;EAEOP,MAAMA,CAAA;IACT,IAAIA,MAAM,GAAG,IAAIR,WAAW,CAAC;MAAC,cAAc,EAAE;IAAkB,CAAC,CAAC;IAClE,IAAG,IAAI,CAACI,MAAM,CAACsB,eAAe,EAAE,EAC5BlB,MAAM,GAAIA,MAAM,CAACmB,MAAM,CAAC,eAAe,EAAE,UAAU,IAAI,CAACvB,MAAM,CAACwB,QAAQ,EAAE,EAAE,CAAC;IAChF,OAAO;MAACC,OAAO,EAAErB;IAAM,CAAC;EAC5B;EAEOsB,QAAQA,CAACC,IAAQ;IACpB,IAAI,CAAC3B,MAAM,CAAC0B,QAAQ,CAACC,IAAI,CAAC;EAC9B;EAEOC,SAASA,CAAClB,KAAqB;IAClC,IAAI,CAACV,MAAM,CAAC4B,SAAS,EAAE;IACvB,OAAO,IAAI,CAACnB,WAAW,CAACC,KAAK,CAAC;EAClC;;SAxCkBb,WAAW;;;;;SAAXA,MAAW;EAAAgC,OAAA,EAAXhC,MAAW,CAAAiC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}